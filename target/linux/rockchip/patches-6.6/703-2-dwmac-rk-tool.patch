From 9df7a5576a10f40a8d909a73a0a2bc76f9681eed Mon Sep 17 00:00:00 2001
From: jjm2473 <jjm2473@gmail.com>
Date: Wed, 23 Apr 2025 15:10:25 +0800
Subject: [PATCH] drivers/dwmac-rk: supports rockchip dwmac tool

---
 drivers/net/ethernet/stmicro/stmmac/Kconfig   | 10 ++++
 drivers/net/ethernet/stmicro/stmmac/Makefile  |  4 +-
 .../net/ethernet/stmicro/stmmac/dwmac-rk.c    | 46 +++++++++++++++++++
 3 files changed, 59 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/stmicro/stmmac/Kconfig
+++ b/drivers/net/ethernet/stmicro/stmmac/Kconfig
@@ -142,6 +142,16 @@ config DWMAC_ROCKCHIP
 	  This selects the Rockchip RK3288 SoC glue layer support for
 	  the stmmac device driver.
 
+config DWMAC_ROCKCHIP_TOOL
+	bool "Rockchip dwmac tool support"
+	depends on DWMAC_ROCKCHIP
+	default DWMAC_ROCKCHIP if !ROCKCHIP_MINI_KERNEL
+	help
+	  Support for Ethernet functions on Rockchip SoCs.
+
+	  This selects the features for Rockchip's Ethernet, include PHY loopback,
+	  MAC loopback, and delayline scanning of RGMII mode.
+
 config DWMAC_SOCFPGA
 	tristate "SOCFPGA dwmac support"
 	default ARCH_INTEL_SOCFPGA
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -20,7 +20,9 @@ obj-$(CONFIG_DWMAC_LPC18XX)	+= dwmac-lpc
 obj-$(CONFIG_DWMAC_MEDIATEK)	+= dwmac-mediatek.o
 obj-$(CONFIG_DWMAC_MESON)	+= dwmac-meson.o dwmac-meson8b.o
 obj-$(CONFIG_DWMAC_QCOM_ETHQOS)	+= dwmac-qcom-ethqos.o
-obj-$(CONFIG_DWMAC_ROCKCHIP)	+= dwmac-rk.o
+obj-$(CONFIG_DWMAC_ROCKCHIP)	+= dwmac-rockchip.o
+dwmac-rockchip-objs := dwmac-rk.o
+dwmac-rockchip-$(CONFIG_DWMAC_ROCKCHIP_TOOL) += dwmac-rk-tool.o
 obj-$(CONFIG_DWMAC_SOCFPGA)	+= dwmac-altr-socfpga.o
 obj-$(CONFIG_DWMAC_STARFIVE)	+= dwmac-starfive.o
 obj-$(CONFIG_DWMAC_STI)		+= dwmac-sti.o
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
@@ -25,6 +25,10 @@
 
 #include "stmmac_platform.h"
 
+#ifdef CONFIG_DWMAC_ROCKCHIP_TOOL
+#include "dwmac-rk-tool.h"
+#endif
+
 struct rk_priv_data;
 struct rk_gmac_ops {
 	void (*set_to_rgmii)(struct rk_priv_data *bsp_priv,
@@ -2093,6 +2097,39 @@ static void rk_fix_speed(void *priv, uns
 	}
 }
 
+#ifdef CONFIG_DWMAC_ROCKCHIP_TOOL
+void dwmac_rk_set_rgmii_delayline(struct stmmac_priv *priv,
+				  int tx_delay, int rx_delay)
+{
+	struct rk_priv_data *bsp_priv = priv->plat->bsp_priv;
+
+	if (bsp_priv->ops->set_to_rgmii) {
+		bsp_priv->ops->set_to_rgmii(bsp_priv, tx_delay, rx_delay);
+		bsp_priv->tx_delay = tx_delay;
+		bsp_priv->rx_delay = rx_delay;
+	}
+}
+
+void dwmac_rk_get_rgmii_delayline(struct stmmac_priv *priv,
+				  int *tx_delay, int *rx_delay)
+{
+	struct rk_priv_data *bsp_priv = priv->plat->bsp_priv;
+
+	if (!bsp_priv->ops->set_to_rgmii)
+		return;
+
+	*tx_delay = bsp_priv->tx_delay;
+	*rx_delay = bsp_priv->rx_delay;
+}
+
+int dwmac_rk_get_phy_interface(struct stmmac_priv *priv)
+{
+	struct rk_priv_data *bsp_priv = priv->plat->bsp_priv;
+
+	return bsp_priv->phy_iface;
+}
+#endif
+
 static int rk_gmac_probe(struct platform_device *pdev)
 {
 	struct plat_stmmacenet_data *plat_dat;
@@ -2139,6 +2176,12 @@ static int rk_gmac_probe(struct platform
 	if (ret)
 		goto err_gmac_powerdown;
 
+#ifdef CONFIG_DWMAC_ROCKCHIP_TOOL
+	ret = dwmac_rk_create_loopback_sysfs(&pdev->dev);
+	if (ret)
+		goto err_gmac_powerdown;
+#endif
+
 	return 0;
 
 err_gmac_powerdown:
@@ -2156,6 +2199,9 @@ static void rk_gmac_remove(struct platfo
 	stmmac_dvr_remove(&pdev->dev);
 
 	rk_gmac_powerdown(bsp_priv);
+#ifdef CONFIG_DWMAC_ROCKCHIP_TOOL
+	dwmac_rk_remove_loopback_sysfs(&pdev->dev);
+#endif
 	if (bsp_priv->phy_reset)
 		reset_control_put(bsp_priv->phy_reset);
 }
