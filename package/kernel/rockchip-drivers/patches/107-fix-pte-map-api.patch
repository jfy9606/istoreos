From 56f741cfa63ef4970acea019f56dc683ee1af573 Mon Sep 17 00:00:00 2001
From: jjm2473 <jjm2473@gmail.com>
Date: Mon, 24 Feb 2025 15:44:03 +0800
Subject: [PATCH] RGA: fix pte map API on linux 6.6

Fix
```
ERROR: modpost: "__pte_offset_map_lock" [/openwrt/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/rockchip-drivers-24.11.1/drivers/video/rockchip/rga3/rga3.ko] undefined!
```
---
 drivers/video/rockchip/rga/rga_mmu_info.c   | 10 +++++++++-
 drivers/video/rockchip/rga2/rga2_mmu_info.c | 11 +++++++++++
 drivers/video/rockchip/rga3/rga_mm.c        | 10 ++++++++++
 3 files changed, 30 insertions(+), 1 deletion(-)

diff --git a/drivers/video/rockchip/rga/rga_mmu_info.c b/drivers/video/rockchip/rga/rga_mmu_info.c
index 60e9e75..1373e30 100644
--- a/drivers/video/rockchip/rga/rga_mmu_info.c
+++ b/drivers/video/rockchip/rga/rga_mmu_info.c
@@ -428,6 +428,14 @@ static int rga_MapUserMemory(struct page **pages,
                         pte_t       * pte;
                         spinlock_t  * ptl;
                         unsigned long pfn;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
+                        if (follow_pte(current->mm, (Memory + i) << PAGE_SHIFT, &pte, &ptl)) {
+                            pr_err("RGA2 failed to follow_pte, result = %d, pageCount = %d\n",
+                                   result, pageCount);
+                            status = RGA_OUT_OF_RESOURCES;
+                            break;
+                        }
+#else
                         pgd_t * pgd;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0)
 						p4d_t * p4d;
@@ -477,7 +485,7 @@ static int rga_MapUserMemory(struct page **pages,
                         {
                             break;
                         }
-
+#endif
                         pfn = pte_pfn(*pte);
                         Address = ((pfn << PAGE_SHIFT) | (((unsigned long)((Memory + i) << PAGE_SHIFT)) & ~PAGE_MASK));
                         pte_unmap_unlock(pte, ptl);
diff --git a/drivers/video/rockchip/rga2/rga2_mmu_info.c b/drivers/video/rockchip/rga2/rga2_mmu_info.c
index 324d52b..18081f0 100644
--- a/drivers/video/rockchip/rga2/rga2_mmu_info.c
+++ b/drivers/video/rockchip/rga2/rga2_mmu_info.c
@@ -909,12 +909,14 @@ static int rga2_MapUserMemory(struct page **pages, uint32_t *pageTable,
 	struct page __maybe_unused *page;
 	spinlock_t * ptl;
 	pte_t * pte;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0)
 	pgd_t * pgd;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0)
 	p4d_t * p4d;
 #endif
 	pud_t * pud;
 	pmd_t * pmd;
+#endif
 
 	status = 0;
 	Address = 0;
@@ -972,6 +974,14 @@ static int rga2_MapUserMemory(struct page **pages, uint32_t *pageTable,
 			status = RGA2_OUT_OF_RESOURCES;
 			break;
 		}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
+		if (follow_pte(current->mm, (Memory + i) << PAGE_SHIFT, &pte, &ptl)) {
+			pr_err("RGA2 failed to follow_pte, result = %d, pageCount = %d\n",
+				result, pageCount);
+			status = RGA2_OUT_OF_RESOURCES;
+			break;
+		}
+#else
 		pgd = pgd_offset(current->mm, (Memory + i) << PAGE_SHIFT);
 		if (pgd_none(*pgd) || unlikely(pgd_bad(*pgd))) {
 			pr_err("RGA2 failed to get pgd, result = %d, pageCount = %d\n",
@@ -1016,6 +1026,7 @@ static int rga2_MapUserMemory(struct page **pages, uint32_t *pageTable,
 			status = RGA2_OUT_OF_RESOURCES;
 			break;
 		}
+#endif
 		pfn = pte_pfn(*pte);
 		Address = ((pfn << PAGE_SHIFT) |
 			  (((unsigned long)((Memory + i) << PAGE_SHIFT)) & ~PAGE_MASK));
diff --git a/drivers/video/rockchip/rga3/rga_mm.c b/drivers/video/rockchip/rga3/rga_mm.c
index e249a0a..47fd2a2 100644
--- a/drivers/video/rockchip/rga3/rga_mm.c
+++ b/drivers/video/rockchip/rga3/rga_mm.c
@@ -42,12 +42,14 @@ static int rga_get_user_pages_from_vma(struct page **pages, unsigned long Memory
 	struct vm_area_struct *vma;
 	spinlock_t *ptl;
 	pte_t *pte;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0)
 	pgd_t *pgd;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0)
 	p4d_t *p4d;
 #endif
 	pud_t *pud;
 	pmd_t *pmd;
+#endif
 	unsigned long pfn;
 
 	for (i = 0; i < pageCount; i++) {
@@ -58,6 +60,13 @@ static int rga_get_user_pages_from_vma(struct page **pages, unsigned long Memory
 			break;
 		}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0)
+		if (follow_pte(current_mm, (Memory + i) << PAGE_SHIFT, &pte, &ptl)) {
+			pr_err("page[%d] failed to follow_pte\n", i);
+			ret = RGA_OUT_OF_RESOURCES;
+			break;
+		}
+#else
 		pgd = pgd_offset(current_mm, (Memory + i) << PAGE_SHIFT);
 		if (pgd_none(*pgd) || unlikely(pgd_bad(*pgd))) {
 			pr_err("page[%d] failed to get pgd\n", i);
@@ -100,6 +109,7 @@ static int rga_get_user_pages_from_vma(struct page **pages, unsigned long Memory
 			ret = RGA_OUT_OF_RESOURCES;
 			break;
 		}
+#endif
 
 		pfn = pte_pfn(*pte);
 		pages[i] = pfn_to_page(pfn);
-- 
2.46.0

