From b53308643ce75bd4b1ffb47572d19c8c2aed8529 Mon Sep 17 00:00:00 2001
From: jjm2473 <jjm2473@gmail.com>
Date: Wed, 3 Sep 2025 15:05:32 +0800
Subject: [PATCH] include/soc/rockchip: sync from develop-6.6

---
 include/soc/rockchip/rockchip_opp_select.h     | 17 +++++++++++++++++
 include/soc/rockchip/rockchip_system_monitor.h | 14 +++++++++++++-
 2 files changed, 30 insertions(+), 1 deletion(-)

--- a/include/soc/rockchip/rockchip_opp_select.h
+++ b/include/soc/rockchip/rockchip_opp_select.h
@@ -44,6 +44,7 @@ struct volt_rm_table {
 struct rockchip_opp_data {
 	config_clks_t config_clks;
 	config_regulators_t config_regulators;
+	bool is_use_pvtpll;
 
 	int (*get_soc_info)(struct device *dev, struct device_node *np,
 			    int *bin, int *process);
@@ -97,6 +98,7 @@ struct pvtpll_opp_table {
  * @init_freq:		Set the initial frequency when init opp table.
  * @is_rate_volt_checked: Marks if device has checked initial rate and voltage.
  * @pvtpll_clk_id:      Device's clock id.
+ * @pvtpll_smc:		Marks if smc call of pvtpll is available.
  * @pvtpll_low_temp:    Marks if device has low temperature pvtpll config.
  */
 struct rockchip_opp_info {
@@ -138,9 +140,15 @@ struct rockchip_opp_info {
 	bool is_rate_volt_checked;
 
 	u32 pvtpll_clk_id;
+	bool pvtpll_smc;
 	bool pvtpll_low_temp;
 };
 
+static inline bool rockchip_opp_is_use_pvtpll(struct rockchip_opp_info *info)
+{
+	return (info->is_scmi_clk || (info->data && info->data->is_use_pvtpll));
+}
+
 #if IS_ENABLED(CONFIG_ROCKCHIP_OPP)
 int rockchip_of_get_leakage(struct device *dev, char *lkg_name, int *leakage);
 int rockchip_nvmem_cell_read_u8(struct device_node *np, const char *cell_id,
@@ -166,6 +174,8 @@ int rockchip_set_intermediate_rate(struc
 				   struct clk *clk, unsigned long old_freq,
 				   unsigned long new_freq, bool is_scaling_up,
 				   bool is_set_clk);
+int rockchip_opp_set_low_length(struct device *dev, struct device_node *np,
+				struct rockchip_opp_info *opp_info);
 int rockchip_opp_config_regulators(struct device *dev,
 				     struct dev_pm_opp *old_opp,
 				     struct dev_pm_opp *new_opp,
@@ -252,6 +262,13 @@ rockchip_set_intermediate_rate(struct de
 {
 	return -EOPNOTSUPP;
 }
+
+static inline int
+rockchip_opp_set_low_length(struct device *dev, struct device_node *np,
+			    struct rockchip_opp_info *opp_info)
+{
+	return -EOPNOTSUPP;
+}
 
 static inline int
 rockchip_opp_config_regulators(struct device *dev,
--- a/include/soc/rockchip/rockchip_system_monitor.h
+++ b/include/soc/rockchip/rockchip_system_monitor.h
@@ -80,7 +80,8 @@ struct temp_opp_table {
  * @low_temp_min_volt:	Minimum voltage of OPPs when low temperature, in
  *			microvolt
  * @high_temp_max_volt:	Maximum voltage when high temperature, in microvolt
- * @video_4k_freq:	Maximum frequency when paly 4k video, in KHz
+ * @video_1080p_freq:	Maximum frequency when play 1080p video, in KHz
+ * @video_4k_freq:	Maximum frequency when play 4k video, in KHz
  * @reboot_freq:	Limit maximum and minimum frequency when reboot, in KHz
  * @status_min_limit:	Minimum frequency of some status frequency, in KHz
  * @status_max_limit:	Minimum frequency of all status frequency, in KHz
@@ -111,6 +112,7 @@ struct monitor_dev_info {
 	unsigned long low_temp_min_volt;
 	unsigned long high_temp_max_volt;
 	unsigned int early_suspend_freq;
+	unsigned int video_1080p_freq;
 	unsigned int video_4k_freq;
 	unsigned int reboot_freq;
 	unsigned int status_min_limit;
@@ -149,6 +151,8 @@ int rockchip_monitor_dev_low_temp_adjust
 int rockchip_monitor_dev_high_temp_adjust(struct monitor_dev_info *info,
 					  bool is_high);
 int rockchip_monitor_suspend_low_temp_adjust(int cpu);
+void rockchip_monitor_remove_cpu_limit(int cpu);
+void rockchip_monitor_restore_cpu_limit(int cpu);
 int rockchip_system_monitor_register_notifier(struct notifier_block *nb);
 void rockchip_system_monitor_unregister_notifier(struct notifier_block *nb);
 #else
@@ -201,6 +205,14 @@ static inline int rockchip_monitor_suspe
 	return 0;
 };
 
+static inline void rockchip_monitor_remove_cpu_limit(int cpu)
+{
+};
+
+static inline void rockchip_monitor_restore_cpu_limit(int cpu)
+{
+};
+
 static inline int
 rockchip_system_monitor_register_notifier(struct notifier_block *nb)
 {
