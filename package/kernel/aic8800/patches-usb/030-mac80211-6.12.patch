
--- a/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_main.c
+++ b/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_main.c
@@ -1073,7 +1073,7 @@ static void rwnx_csa_finish(struct work_
         } else
             rwnx_txq_vif_stop(vif, RWNX_TXQ_STOP_CHAN, rwnx_hw);
         spin_unlock_bh(&rwnx_hw->cb_lock);
-#if (LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION3)
+#if (LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION3) && !defined(BUILD_OPENWRT)
 		cfg80211_ch_switch_notify(vif->ndev, &csa->chandef, 0, 0);
 #elif (LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION)
 		cfg80211_ch_switch_notify(vif->ndev, &csa->chandef, 0);
@@ -3727,7 +3727,7 @@ static int rwnx_cfg80211_start_ap(struct
  * @change_beacon: Change the beacon parameters for an access point mode
  *	interface. This should reject the call when AP mode wasn't started.
  */
-#if LINUX_VERSION_CODE > KERNEL_VERSION(6, 7, 0)
+#if LINUX_VERSION_CODE > KERNEL_VERSION(6, 7, 0) || defined(BUILD_OPENWRT)
 static int rwnx_cfg80211_change_beacon(struct wiphy *wiphy, struct net_device *dev,
                                        struct cfg80211_ap_update *info)
 #else
@@ -3747,7 +3747,7 @@ static int rwnx_cfg80211_change_beacon(s
 	elem.dma_addr = 0;
 
     // Build the beacon
-#if LINUX_VERSION_CODE > KERNEL_VERSION(6, 7, 0)
+#if LINUX_VERSION_CODE > KERNEL_VERSION(6, 7, 0) || defined(BUILD_OPENWRT)
     buf = rwnx_build_bcn(bcn, &info->beacon);
 #else
     buf = rwnx_build_bcn(bcn, info);
@@ -3844,6 +3844,7 @@ cfg80211_chandef_identical(const struct
 #endif
 
 static int rwnx_cfg80211_set_monitor_channel(struct wiphy *wiphy,
+                                             struct net_device *dev,
                                              struct cfg80211_chan_def *chandef)
 {
     struct rwnx_hw *rwnx_hw = wiphy_priv(wiphy);
@@ -3899,7 +3900,7 @@ static int rwnx_cfg80211_set_monitor_cha
 
 int rwnx_cfg80211_set_monitor_channel_(struct wiphy *wiphy,
                                              struct cfg80211_chan_def *chandef){
-    return rwnx_cfg80211_set_monitor_channel(wiphy, chandef);
+    return rwnx_cfg80211_set_monitor_channel(wiphy, NULL, chandef);
 }
 
 
@@ -4375,7 +4376,7 @@ static int rwnx_cfg80211_get_channel(str
     if (rwnx_vif->vif_index == rwnx_hw->monitor_vif)
     {
         //retrieve channel from firmware
-        rwnx_cfg80211_set_monitor_channel(wiphy, NULL);
+        rwnx_cfg80211_set_monitor_channel(wiphy, NULL, NULL);
     }
 
     //Check if channel context is valid
@@ -4560,6 +4561,7 @@ int rwnx_cfg80211_start_radar_detection(
                                     #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 15, 0))
                                         , u32 cac_time_ms
                                     #endif
+                                        , int link_id
                                         )
 {
     struct rwnx_hw *rwnx_hw = wiphy_priv(wiphy);
@@ -4709,7 +4711,7 @@ int rwnx_cfg80211_channel_switch(struct
         goto end;
     } else {
         INIT_WORK(&csa->work, rwnx_csa_finish);
-#if LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION4
+#if LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION4 && !defined(BUILD_OPENWRT)
 		cfg80211_ch_switch_started_notify(dev, &csa->chandef, 0, params->count, false, 0);
 #elif LINUX_VERSION_CODE >= HIGH_KERNEL_VERSION2
         cfg80211_ch_switch_started_notify(dev, &csa->chandef, 0, params->count, false);
--- a/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_mod_params.c
+++ b/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_mod_params.c
@@ -1833,7 +1833,9 @@ void rwnx_custregd(struct rwnx_hw *rwnx_
 // registration (in rwnx_set_wiphy_params()), so nothing has to be done here
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 0, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 5, 0) && !defined(BUILD_OPENWRT)
     wiphy->regulatory_flags |= REGULATORY_IGNORE_STALE_KICKOFF;
+#endif
     wiphy->regulatory_flags |= REGULATORY_WIPHY_SELF_MANAGED;
 
     if (!rwnx_hw->mod_params->custregd)
--- a/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_radar.c
+++ b/src/USB/driver_fw/drivers/aic8800/aic8800_fdrv/rwnx_radar.c
@@ -1399,7 +1399,11 @@ static void rwnx_radar_cac_work(struct w
                     #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)
                        &ctxt->chan_def,
                     #endif
+                    #if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 12, 0)) || BUILD_OPENWRT
+                       NL80211_RADAR_CAC_FINISHED, GFP_KERNEL, 0);
+                    #else
                        NL80211_RADAR_CAC_FINISHED, GFP_KERNEL);
+                    #endif
     rwnx_send_apm_stop_cac_req(rwnx_hw, radar->cac_vif);
     rwnx_chanctx_unlink(radar->cac_vif);
 
@@ -1499,7 +1503,11 @@ void rwnx_radar_cancel_cac(struct rwnx_r
                         #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 14, 0)
                            &ctxt->chan_def,
                         #endif
+                        #if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 12, 0)) || BUILD_OPENWRT
+                           NL80211_RADAR_CAC_ABORTED, GFP_KERNEL, 0);
+                        #else
                            NL80211_RADAR_CAC_ABORTED, GFP_KERNEL);
+                        #endif
         rwnx_chanctx_unlink(radar->cac_vif);
     }
 
